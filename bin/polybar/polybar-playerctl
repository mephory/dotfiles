#!/bin/env ruby
# frozen_string_literal: true

require 'open3'

FIFO = '/tmp/polybar-playerctl'

PLAYERCTL_FORMAT = '{{playerInstance}}|||{{playerName}}|||{{uc(status)}}|||{{title}}'

STATUS_ICONS = {
  'PLAYING' => '',
  'PAUSED' => '',
  'STOPPED' => ''
}.freeze

PLAYER_ICONS = {
  'spotify' => '',
  'chrome' => '',
  'chromium' => '',
  'qutebrowser' => ''
}.freeze

class String
  def truncate(truncate_at, options = {})
    return dup unless length > truncate_at

    omission = options[:omission] || "..."
    length_with_room_for_omission = truncate_at - omission.length
    stop =        if options[:separator]
        rindex(options[:separator], length_with_room_for_omission) || length_with_room_for_omission
      else
        length_with_room_for_omission
      end

    +"#{self[0, stop]}#{omission}"
  end
end

class Player
  attr_reader :id, :name, :status, :title

  def initialize(str)
    @id, @name, @status, @title = str.strip.split('|||')
  end

  def format(active: false)
    status_icon = STATUS_ICONS[status]
    player_icon = PLAYER_ICONS[name] || '?'

    if active
      actions = [
        [1, 'polybar-playerctl toggle'],
        [2, 'polybar-playerctl switch'],
        [3, 'polybar-playerctl next']
      ]
      click_actions(actions, "#{player_icon} #{status_icon} #{title&.truncate(40, omission: '…') || 'No title'}".strip)
    else
      actions = [
        [1, "polybar-playerctl activate #{id}"],
        [2, 'polybar-playerctl switch'],
        [3, 'polybar-playerctl next']
      ]

      click_actions(actions, "%{F#{ENV['WISP_FOREGROUND_SECONDARY']}} #{player_icon} %{F-}".strip)
    end
  end

  def click_actions(actions, s)
    actions.inject(s) do |acc, action|
      "%{A#{action[0]}:#{action[1]}:}#{acc}%{A}"
    end
  end

  def next_id(players)
    p, = players.cycle(2)
                .drop_while { |plr| plr.id != id }
                .drop(1)
                .first

    p&.id
  end

  def self.all
    `playerctl -a metadata -f '#{PLAYERCTL_FORMAT}' 2>/dev/null`.lines.map do |line|
      Player.new(line.strip)
    end.compact
  end
end

def format(players, current_player_id)
  players.map do |player|
    player.format(active: player.id == current_player_id)
  end.join(' ')
end

Q = Queue.new

def main
  File.mkfifo(FIFO) unless File.exist?(FIFO)

  Thread.start do
    Open3.popen2("playerctl -F metadata -f '#{PLAYERCTL_FORMAT}' 2>/dev/null") do |_, stdout, _|
      stdout.each_line do |line|
        Q << [:update, Player.new(line)&.id]
      end
    end
  end

  Thread.start do
    f = File.open(FIFO, 'r+')
    loop do
      cmd, payload = f.gets.strip.split(' ', 2)
      Q << [cmd.to_sym, payload]
    end
  end

  Thread.start do
    loop do
      Q << [:update, nil]
      sleep 2
    end
  end

  players = []
  current_player_id = nil

  loop do
    cmd, payload = Q.pop

    case cmd
    when :update
      old_players = players
      players = Player.all
      current_player_id = payload if payload
      new_player = players.find { |x| !old_players.map(&:id).include?(x.id) }
      current_player_id = new_player.id if new_player && !payload
      current_player_id = players.first&.id unless players.map(&:id).include?(current_player_id)

      puts format(players, current_player_id)
      $stdout.flush
    when :switch
      current_player_id = players.find { |x| x.id == current_player_id }&.next_id(players)
      puts format(players, current_player_id)
      $stdout.flush
    when :activate
      current_player_id = payload
      puts format(players, current_player_id)
      $stdout.flush
    when :toggle
      system "playerctl -p #{current_player_id} play-pause", out: File::NULL, err: File::NULL
    when :next
      system "playerctl -p #{current_player_id} next", out: File::NULL, err: File::NULL
    when :previous
      system "playerctl -p #{current_player_id} previous", out: File::NULL, err: File::NULL
    end
  end
end

if ARGV.empty?
  main
else
  File.write(FIFO, "#{ARGV.join(' ')}\n")
end
