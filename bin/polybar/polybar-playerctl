#!/bin/env ruby
# frozen_string_literal: true

require 'open3'

PLAYERCTL_FORMAT = '{{playerInstance}}|||{{playerName}}|||{{uc(status)}}|||{{title}}'

STATUS_ICONS = {
  'PLAYING' => '',
  'PAUSED' => '',
  'STOPPED' => ''
}.freeze

PLAYER_ICONS = {
  'spotify' => '',
  'chrome' => '',
  'chromium' => ''
}.freeze

def parse_playerdata(str)
  id, name, status, title = str.strip.split('|||')
  {
    id: id,
    name: name,
    status: status,
    title: title
  }
end

def format(playerdata)
  player_icon = PLAYER_ICONS[playerdata[:name]] || ''
  status_icon = STATUS_ICONS[playerdata[:status]] || ''
  "#{player_icon} #{status_icon} #{playerdata[:title]}".strip
end

def next_player(player)
  p, = players_with_title.cycle(2)
                         .drop_while { |id, _| id != player }
                         .drop(1)
                         .select { |_, title| !title.nil? && !title.empty? }
                         .first
  return if p.nil?

  d = `playerctl -p #{p} metadata -f '#{PLAYERCTL_FORMAT}' 2>/dev/null`.strip
  Q << [:playerdata, parse_playerdata(d)]
end

def current_title(player)
  `playerctl -p #{player} metadata -f '{{title}}' 2>/dev/null`.strip
end

def players_with_title
  `playerctl -l`.split("\n").map(&:strip).map do |id|
    [id, current_title(id)]
  end
end

Q = Queue.new

def main
  File.mkfifo('/tmp/polybar-playerctl') unless File.exist?('/tmp/polybar-playerctl')

  Thread.start do
    Open3.popen2("playerctl -F metadata -f '#{PLAYERCTL_FORMAT}' 2>/dev/null") do |_, stdout, _|
      stdout.each_line do |line|
        playerdata = parse_playerdata(line)
        Q << [:playerdata, playerdata]
      end
    end
  end

  Thread.start do
    f = File.open('/tmp/polybar-playerctl', 'r+')
    loop do
      Q << [f.gets.strip.to_sym, nil]
    end
  end

  current_player = nil

  loop do
    cmd, payload = Q.pop

    case cmd
    when :playerdata
      current_player = payload[:id]
      puts format(payload)
      STDOUT.flush
    when :switch
      next_player(current_player)
    when :toggle
      system "playerctl -p #{current_player} play-pause", out: File::NULL, err: File::NULL
    when :next
      system "playerctl -p #{current_player} next", out: File::NULL, err: File::NULL
    when :previous
      system "playerctl -p #{current_player} previous", out: File::NULL, err: File::NULL
    end
  end
end

if ARGV.empty?
  main
else
  File.write('/tmp/polybar-playerctl', "#{ARGV.first}\n")
end
